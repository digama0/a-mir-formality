"use strict";(self.webpackChunka_mir_formality=self.webpackChunka_mir_formality||[]).push([[581],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1959:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={sidebar_position:2},c="Setup",u={unversionedId:"setup",id:"setup",title:"Setup",description:"How to build, test, and run a-mir-formality:",source:"@site/docs/setup.md",sourceDirName:".",slug:"/setup",permalink:"/docs/setup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"How formality works",permalink:"/docs/category/how-formality-works"}},s={},p=[{value:"Run racket manually for better stacktraces",id:"run-racket-manually-for-better-stacktraces",level:2},{value:"The <code>traced</code> macro",id:"the-traced-macro",level:2}],m={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setup"},"Setup"),(0,o.kt)("p",null,"How to build, test, and run a-mir-formality:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://download.racket-lang.org/"},"Download and install racket")),(0,o.kt)("li",{parentName:"ul"},"Check out the a-mir-formality repository"),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"raco test -j22 src")," to run the tests",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This will use 22 parallel threads; you may want to tune the number depending on how many cores you have."))),(0,o.kt)("li",{parentName:"ul"},"You can use ",(0,o.kt)("a",{parentName:"li",href:"https://docs.racket-lang.org/drracket/"},"DrRacket"),", or you can use VSCode. We recommend the following VSCode extensions:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=evzen-wybitul.magic-racket"},"Magic Racket")," to give a Racket mode that supports most LSP operations decently well"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets"},"Rainbow brackets")," is highly recommended to help sort out ",(0,o.kt)("inlineCode",{parentName:"li"},"()"))))),(0,o.kt)("h1",{id:"debugging-tips"},"Debugging tips"),(0,o.kt)("h2",{id:"run-racket-manually-for-better-stacktraces"},"Run racket manually for better stacktraces"),(0,o.kt)("p",null,"When you use ",(0,o.kt)("inlineCode",{parentName:"p"},"raco test"),", you often get stacktraces that are not very helpful. You can do better by running racket manually with the ",(0,o.kt)("inlineCode",{parentName:"p"},"-lerrortrace")," flag, which adds some runtime overhead but tracks more information. This command would run the tests found in the ",(0,o.kt)("inlineCode",{parentName:"p"},"test")," submodule of ",(0,o.kt)("inlineCode",{parentName:"p"},"src/decl/test/copy.rkt"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"racket -l errortrace -l racket/base -e '(require (submod \"src/decl/test/copy.rkt\" test))' \n")),(0,o.kt)("h2",{id:"the-traced-macro"},"The ",(0,o.kt)("inlineCode",{parentName:"h2"},"traced")," macro"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"(traced '() expr)")," macro is used to wrap tests throughout the code. The ",(0,o.kt)("inlineCode",{parentName:"p"},"'()")," is a list of metafunctions and judgments you want to trace. Just add the name of something in there, like ",(0,o.kt)("inlineCode",{parentName:"p"},"lang-item-ok-goals"),", and racket will print out the arguments when it is called, along with its return value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scheme"},"(traced '(lang-item-ok-goals) expr)\n")))}d.isMDXComponent=!0}}]);